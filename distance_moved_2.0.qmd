---
title: "distance_moved_2.0"
---

##################################################

# Karli RiverDist Script

## Load your libraries (You might not need them all right now)

```{r setup libraries}
# Required packages for script
require(tidyverse) # Used for Data Wrangling and Clean-up
require(data.table) # Used for Data Wrangling and Clean-up
require(riverdist) # Used for Individual Movement
require(RMark) # Used for Mark-Recapture Data (Survival and Detection Rates)
library(readxl)
library(gridExtra)
library(moments)
library(ggplot2)

# Convert points to UTMs from decimal degrees
library(sf)

# For the coordinates function
library(sp)
```
## Load dataset

```{r load and filter fish data}
tracking_data_all <- read.csv("C:/Users/jpilchik/OneDrive - DOI/Documents/My study plan/Tagging/Tracking/radio_tracking_2024/data/combined_data/tracking_data_all.csv")

tracking_data_locations <- tracking_data_all %>%
  filter(!is.na(lon) & !is.na(lat))
  

# Select iPad points or receiver with highest power when no iPad exists for the day/shift
tracking_data_locations <- tracking_data_locations %>%
  group_by(radioID, date, shift) %>%
  mutate(has_iPad = any(source == "iPad"), 
         has_receiver = any(source == "receiver")) %>%  # Check if any receiver points exist
  filter(
    (has_iPad & source == "iPad") |  # Keep iPad points if they exist
    (has_receiver & !has_iPad & source == "receiver" & power == max(power, na.rm = TRUE))  # Only filter receiver points with max power if receiver exists
  ) %>%
  ungroup()
```

## Underhill Brook

1. Load your flowline shapefiles (do this for each watershed separately)

```{r Load in watershed flowlines}

underhill_flowlines <- lines <- st_read("C:/Users/jpilchik/OneDrive - DOI/Documents/My study plan/Tagging/Tracking/streamShapeFiles/Riverdist MA BKT/Shapefiles/NHDFlowline_UnderhillBrook.shp") # Reads shapefile, these shapefiles are already in geographic coordinate system NAD83
st_crs(underhill_flowlines) # This just checks to make sure that your lines are in GCS NAD83
underhill_flowlines <- st_transform(underhill_flowlines, 26918) # Projects to UTM Zone 18N (the code for this is 26918)

# Subdivide the river lines into finer segments (e.g., 0.5-meter resolution)
underhill_flowlines_fine <- st_segmentize(underhill_flowlines, dfMaxLength = 0.5)

## Please read note before running next line! Comment the next line out if you already reprojected the raw shapefile.
#st_write(underhill_flowlines_fine, "C:/Users/jpilchik/OneDrive - DOI/Documents/My study plan/Tagging/Tracking/streamShapeFiles/Riverdist MA BKT/Shapefiles/NHDFlowline_UnderhillBrook_UTMZONE18N_Finer.shp") #Once you run this, it will add a new shapefile to your "shapefiles" folder! It will give you a warning if it's already done. I did it for underhill already, but you'll need to repeat this process for each watershed. 


underhill_flowlines_fine_UTMZONE18N <- line2network(path = "C:/Users/jpilchik/OneDrive - DOI/Documents/My study plan/Tagging/Tracking/streamShapeFiles/Riverdist MA BKT/Shapefiles", # Points to the folder in your R Project folder
                                    layer = "NHDFlowline_UnderhillBrook_UTMZONE18N_Finer", # Identifies the shapefile you want to pull from folder
                                    tolerance = 1) # This is the spatial tolerance used to determine connectivity between line segments) 


plot(x=underhill_flowlines_fine_UTMZONE18N) # checks imported line
topologydots(rivers = underhill_flowlines_fine_UTMZONE18N) # checks line topology

# Setting the MOUTH of your watershed allows you to look at directional movement. The "seg = " value will be the segment that includes your mouth, which you can observe in the plot function above. In Underhill, it's segment 46. The "vert = " value identifies the correct node of that segment. Using "showends" on the segment you want will show you what vertex to select.
plot(x=underhill_flowlines_fine_UTMZONE18N)
showends(seg = 46, rivers = underhill_flowlines_fine_UTMZONE18N) # identifies the true mouth of your watershed
underhill_mouth <- setmouth(seg = 46, vert = 547, rivers = underhill_flowlines_fine_UTMZONE18N) # sets the mouth to the segment and vertex you need.

```

2. Load your fish points for the watershed you are analyzing (do this for each watershed separately)
```{r Load in fish points}

# read in your fish points and filter by the watershed you're looking at. Make sure to have X and Y columns available in decimal degrees

# Keep only points from "UNDERHILL" and also remove rows where lat or lon are NA
underhill_points <- tracking_data_locations %>%
  filter(river == "UNDERHILL" & !is.na(lon) & !is.na(lat))

# Make Lat Lon columns numeric

underhill_points_spatial <- underhill_points %>% 
  mutate(POINT_Y = as.numeric(lat)) %>% # change to whatever your Y coord column is
  mutate(POINT_X = as.numeric(lon)) # change to whatever your X coord column is
coordinates(underhill_points_spatial) <- c("POINT_X","POINT_Y") # identifies the coordinate columns
proj4string(underhill_points_spatial) <- CRS("+proj=longlat +datum=WGS84") 
res_underhill <- spTransform(underhill_points_spatial, CRS("+proj=utm +zone=18 +ellps=WGS84")) # reprojects the points to UTM ZONE 18
as(res_underhill, "SpatialPoints")
res_underhill <- as.data.frame(res_underhill)
res_underhill <- res_underhill %>% 
  rename(POINT_X = coords.x1, POINT_Y = coords.x2) %>%  # Rename coords.x1 and coords.x2
  mutate(Rownumber =row_number())
underhill_segvert <- xy2segvert(x = res_underhill$POINT_X, y = res_underhill$POINT_Y, rivers = underhill_flowlines_fine_UTMZONE18N) # change the "res$" to your X and Y coord columns
  
## Display raw points (red dots) and snapped points (blue). Run these three lines all at once
plot(x= underhill_flowlines_fine_UTMZONE18N)
points(res_underhill$POINT_X, res_underhill$POINT_Y, pch=16, col="red") # shows raw points
riverpoints(seg = underhill_segvert$seg, vert = underhill_segvert$vert, rivers = underhill_flowlines_fine_UTMZONE18N, pch = 15, col="blue")


```

```{r snapping distance}
hist(underhill_segvert$snapdist, main="snapping distance (m)")
```
```{r displaying point data in river locations}
zoomtoseg(seg=c(6, 44, 18), rivers= underhill_flowlines_fine_UTMZONE18N)
points(res_underhill$POINT_X, res_underhill$POINT_Y, pch=16, col="red")
riverpoints(seg=underhill_segvert$seg, vert=underhill_segvert$vert, rivers= underhill_flowlines_fine_UTMZONE18N, 
            pch=15, 
            col="blue")
```

```{r prepare for and calculate distance moved}

nrow(res_underhill)  # Total points before snapping
nrow(underhill_segvert)  # Total points successfully snapped

# Assign row numbers
underhill_segvert <- underhill_segvert %>%
  mutate(Rownumber = row_number()) 

# Merge snapped points back with the original dataset using row numbers
underhill_locations <- left_join(res_underhill %>% select(Rownumber, radioID, trackedTime_EST, POINT_X, POINT_Y), 
                               underhill_segvert, 
                               by = "Rownumber")

# Organize dataset
underhill_locations <- underhill_locations %>%
  select(radioID, trackedTime_EST, POINT_X, POINT_Y, snap_x, snap_y, seg, vert, snapdist)

# Arrange data by fish ID and datetime to ensure chronological order
underhill_locations <- underhill_locations %>%
  arrange(radioID, trackedTime_EST)

# Check for duplicate rows
duplicates <- underhill_locations %>%
  group_by(radioID, trackedTime_EST) %>%
  filter(n() > 1)

print(duplicates)

# Initialize a column for movement distance
underhill_locations$distMoved_m <- NA

# Loop through each fish and calculate movement distance
for (fish in unique(underhill_locations$radioID)) {
  fish_data <- underhill_locations[underhill_locations$radioID == fish, ]  # Subset data for the fish
  
  if (nrow(fish_data) > 1) {
    for (i in 2:nrow(fish_data)) {
      # Get previous and current locations
      from_seg <- fish_data$seg[i - 1]
      from_vert <- fish_data$vert[i - 1]
      to_seg <- fish_data$seg[i]
      to_vert <- fish_data$vert[i]
      
      # Calculate distance
      dist <- riverdistance(startseg = from_seg, startvert = from_vert, 
                            endseg = to_seg, endvert = to_vert, 
                            rivers = underhill_flowlines_fine_UTMZONE18N, stopiferror = FALSE)
      
      # Store the result
      underhill_locations$distMoved_m[underhill_locations$radioID == fish & underhill_locations$trackedTime_EST == fish_data$trackedTime_EST[i]] <- dist
    }
  }
}

# Replace NAs (first observation for each fish) with 0
underhill_locations$distMoved_m[is.na(underhill_locations$distMoved_m)] <- 0

```

```{r histogram of distance moved}
hist(underhill_locations$distMoved_m, main="distance moved (m)")
```

### Dickey Brook

1. Load your flowline shapefiles (do this for each watershed separately)

```{r Load in watershed flowlines}

dickey_flowlines <- lines <- st_read("C:/Users/jpilchik/OneDrive - DOI/Documents/My study plan/Tagging/Tracking/streamShapeFiles/Riverdist MA BKT/Shapefiles/NHDFlowline_DickeyBrook.shp") # Reads shapefile, these shapefiles are already in geographic coordinate system NAD83
st_crs(dickey_flowlines) # This just checks to make sure that your lines are in GCS NAD83
dickey_flowlines <- st_transform(dickey_flowlines, 26918) # Projects to UTM Zone 18N (the code for this is 26918)

# Subdivide the river lines into finer segments (e.g., 0.5-meter resolution)
dickey_flowlines_fine <- st_segmentize(dickey_flowlines, dfMaxLength = 0.5)

## Please read note before running next line! Comment the next line out if you already reprojected the raw shapefile.
#st_write(dickey_flowlines_fine, "C:/Users/jpilchik/OneDrive - DOI/Documents/My study plan/Tagging/Tracking/streamShapeFiles/Riverdist MA BKT/Shapefiles/NHDFlowline_DickeyBrook_UTMZONE18N_Finer.shp") #Once you run this, it will add a new shapefile to your "shapefiles" folder! It will give you a warning if it's already done. I did it for underhill already, but you'll need to repeat this process for each watershed. 


dickey_flowlines_fine_UTMZONE18N <- line2network(path = "C:/Users/jpilchik/OneDrive - DOI/Documents/My study plan/Tagging/Tracking/streamShapeFiles/Riverdist MA BKT/Shapefiles", # Points to the folder in your R Project folder
                                    layer = "NHDFlowline_DickeyBrook_UTMZONE18N_Finer", # Identifies the shapefile you want to pull from folder
                                    tolerance = 1) # This is the spatial tolerance used to determine connectivity between line segments) 


plot(x=dickey_flowlines_fine_UTMZONE18N) # checks imported line
topologydots(rivers = dickey_flowlines_fine_UTMZONE18N) # checks line topology

# Setting the MOUTH of your watershed allows you to look at directional movement. The "seg = " value will be the segment that includes your mouth, which you can observe in the plot function above. In Underhill, it's segment 46. The "vert = " value identifies the correct node of that segment. Using "showends" on the segment you want will show you what vertex to select.
plot(x=dickey_flowlines_fine_UTMZONE18N)
showends(seg = 43, rivers = dickey_flowlines_fine_UTMZONE18N) # identifies the true mouth of your watershed
dickey_mouth <- setmouth(seg = 43, vert = 615, rivers = dickey_flowlines_fine_UTMZONE18N) # sets the mouth to the segment and vertex you need.

```

2. Load your fish points for the watershed you are analyzing (do this for each watershed separately)
```{r Load in fish points}

# read in your fish points and filter by the watershed you're looking at. Make sure to have X and Y columns available in decimal degrees

# Keep only points from "DICKEY" and also remove rows where lat or lon are NA
dickey_points <- tracking_data_locations %>%
  filter(river == "DICKEY" & !is.na(lon) & !is.na(lat))

# Make Lat Lon columns numeric

dickey_points_spatial <- dickey_points %>% 
  mutate(POINT_Y = as.numeric(lat)) %>% # change to whatever your Y coord column is
  mutate(POINT_X = as.numeric(lon)) # change to whatever your X coord column is
coordinates(dickey_points_spatial) <- c("POINT_X","POINT_Y") # identifies the coordinate columns
proj4string(dickey_points_spatial) <- CRS("+proj=longlat +datum=WGS84") 
res_dickey <- spTransform(dickey_points_spatial, CRS("+proj=utm +zone=18 +ellps=WGS84")) # reprojects the points to UTM ZONE 18
as(res_dickey, "SpatialPoints")
res_dickey <- as.data.frame(res_dickey)
res_dickey <- res_dickey %>% 
  rename(POINT_X = coords.x1, POINT_Y = coords.x2) %>%  # Rename coords.x1 and coords.x2
  mutate(Rownumber =row_number())
dickey_segvert <- xy2segvert(x = res_dickey$POINT_X, y = res_dickey$POINT_Y, rivers = dickey_flowlines_fine_UTMZONE18N) # change the "res$" to your X and Y coord columns
  
## Display raw points (red dots) and snapped points (blue). Run these three lines all at once
plot(x= dickey_flowlines_fine_UTMZONE18N)
points(res_dickey$POINT_X, res_dickey$POINT_Y, pch=16, col="red") # shows raw points
riverpoints(seg = dickey_segvert$seg, vert = dickey_segvert$vert, rivers = dickey_flowlines_fine_UTMZONE18N, pch = 15, col="blue")


```
```{r snapping distance}
hist(dickey_segvert$snapdist, main="snapping distance (m)")
```

```{r displaying point data in river locations}
zoomtoseg(seg=c(43, 8, 86), rivers= dickey_flowlines_fine_UTMZONE18N)
points(res_dickey$POINT_X, res_dickey$POINT_Y, pch=16, col="red")
riverpoints(seg=dickey_segvert$seg, vert=dickey_segvert$vert, rivers= dickey_flowlines_fine_UTMZONE18N, 
            pch=15, 
            col="blue")
```

```{r prepare for and calculate distance moved}

nrow(res_dickey)  # Total points before snapping
nrow(dickey_segvert)  # Total points successfully snapped

# Assign row numbers
dickey_segvert <- dickey_segvert %>%
  mutate(Rownumber = row_number()) 

# Merge snapped points back with the original dataset using row numbers
dickey_locations <- left_join(res_dickey %>% select(Rownumber, radioID, trackedTime_EST, POINT_X, POINT_Y), 
                               dickey_segvert, 
                               by = "Rownumber")

# Organize dataset
dickey_locations <- dickey_locations %>%
  select(radioID, trackedTime_EST, POINT_X, POINT_Y, snap_x, snap_y, seg, vert, snapdist)

# Arrange data by fish ID and datetime to ensure chronological order
dickey_locations <- dickey_locations %>%
  arrange(radioID, trackedTime_EST)

# Check for duplicate rows
duplicates <- dickey_locations %>%
  group_by(radioID, trackedTime_EST) %>%
  filter(n() > 1)

print(duplicates)

# Initialize a column for movement distance
dickey_locations$distMoved_m <- NA

# Loop through each fish and calculate movement distance
for (fish in unique(dickey_locations$radioID)) {
  fish_data <- dickey_locations[dickey_locations$radioID == fish, ]  # Subset data for the fish
  
  if (nrow(fish_data) > 1) {
    for (i in 2:nrow(fish_data)) {
      # Get previous and current locations
      from_seg <- fish_data$seg[i - 1]
      from_vert <- fish_data$vert[i - 1]
      to_seg <- fish_data$seg[i]
      to_vert <- fish_data$vert[i]
      
      # Calculate distance
      dist <- riverdistance(startseg = from_seg, startvert = from_vert, 
                            endseg = to_seg, endvert = to_vert, 
                            rivers = dickey_flowlines_fine_UTMZONE18N, stopiferror = FALSE)
      
      # Store the result
      dickey_locations$distMoved_m[dickey_locations$radioID == fish & dickey_locations$trackedTime_EST == fish_data$trackedTime_EST[i]] <- dist
    }
  }
}

# Replace NAs (first observation for each fish) with 0
dickey_locations$distMoved_m[is.na(dickey_locations$distMoved_m)] <- 0

```

```{r histogram of distance moved}
hist(dickey_locations$distMoved_m, main="distance moved (m)")
```

### Dry Brook

1. Load your flowline shapefiles (do this for each watershed separately)

```{r Load in watershed flowlines}

dry_flowlines <- lines <- st_read("C:/Users/jpilchik/OneDrive - DOI/Documents/My study plan/Tagging/Tracking/streamShapeFiles/Riverdist MA BKT/Shapefiles/NHDFlowline_DryBrook.shp") # Reads shapefile, these shapefiles are already in geographic coordinate system NAD83
st_crs(dry_flowlines) # This just checks to make sure that your lines are in GCS NAD83
dry_flowlines <- st_transform(dry_flowlines, 26918) # Projects to UTM Zone 18N (the code for this is 26918)

# Subdivide the river lines into finer segments (e.g., 0.5-meter resolution)
dry_flowlines_fine <- st_segmentize(dry_flowlines, dfMaxLength = 0.5)

## Please read note before running next line! Comment the next line out if you already reprojected the raw shapefile.
#st_write(dry_flowlines_fine, "C:/Users/jpilchik/OneDrive - DOI/Documents/My study plan/Tagging/Tracking/streamShapeFiles/Riverdist MA BKT/Shapefiles/NHDFlowline_DryBrook_UTMZONE18N_Finer.shp") #Once you run this, it will add a new shapefile to your "shapefiles" folder! It will give you a warning if it's already done. I did it for underhill already, but you'll need to repeat this process for each watershed. 


dry_flowlines_fine_UTMZONE18N <- line2network(path = "C:/Users/jpilchik/OneDrive - DOI/Documents/My study plan/Tagging/Tracking/streamShapeFiles/Riverdist MA BKT/Shapefiles", # Points to the folder in your R Project folder
                                    layer = "NHDFlowline_DryBrook_UTMZONE18N_Finer", # Identifies the shapefile you want to pull from folder
                                    tolerance = 1) # This is the spatial tolerance used to determine connectivity between line segments) 


plot(x=dry_flowlines_fine_UTMZONE18N) # checks imported line
topologydots(rivers = dry_flowlines_fine_UTMZONE18N) # checks line topology

# Setting the MOUTH of your watershed allows you to look at directional movement. The "seg = " value will be the segment that includes your mouth, which you can observe in the plot function above. In Underhill, it's segment 46. The "vert = " value identifies the correct node of that segment. Using "showends" on the segment you want will show you what vertex to select.
plot(x=dry_flowlines_fine_UTMZONE18N)
showends(seg = 9, rivers = dry_flowlines_fine_UTMZONE18N) # identifies the true mouth of your watershed
dry_mouth <- setmouth(seg = 9, vert = 377, rivers = dry_flowlines_fine_UTMZONE18N) # sets the mouth to the segment and vertex you need.

```

2. Load your fish points for the watershed you are analyzing (do this for each watershed separately)
```{r Load in fish points}

# read in your fish points and filter by the watershed you're looking at. Make sure to have X and Y columns available in decimal degrees

# Keep only points from "DRY UPPER" and also remove rows where lat or lon are NA
dry_points <- tracking_data_locations %>%
  filter(river == "DRY UPPER" & !is.na(lon) & !is.na(lat))

# Make Lat Lon columns numeric

dry_points_spatial <- dry_points %>% 
  mutate(POINT_Y = as.numeric(lat)) %>% # change to whatever your Y coord column is
  mutate(POINT_X = as.numeric(lon)) # change to whatever your X coord column is
coordinates(dry_points_spatial) <- c("POINT_X","POINT_Y") # identifies the coordinate columns
proj4string(dry_points_spatial) <- CRS("+proj=longlat +datum=WGS84") 
res_dry <- spTransform(dry_points_spatial, CRS("+proj=utm +zone=18 +ellps=WGS84")) # reprojects the points to UTM ZONE 18
as(res_dry, "SpatialPoints")
res_dry <- as.data.frame(res_dry)
res_dry <- res_dry %>% 
  rename(POINT_X = coords.x1, POINT_Y = coords.x2) %>%  # Rename coords.x1 and coords.x2
  mutate(Rownumber =row_number())
dry_segvert <- xy2segvert(x = res_dry$POINT_X, y = res_dry$POINT_Y, rivers = dry_flowlines_fine_UTMZONE18N) # change the "res$" to your X and Y coord columns
  
## Display raw points (red dots) and snapped points (blue). Run these three lines all at once
plot(x= dry_flowlines_fine_UTMZONE18N)
points(res_dry$POINT_X, res_dry$POINT_Y, pch=16, col="red") # shows raw points
riverpoints(seg = dry_segvert$seg, vert = dry_segvert$vert, rivers = dry_flowlines_fine_UTMZONE18N, pch = 15, col="blue")


```

```{r snapping distance}
hist(dry_segvert$snapdist, main="snapping distance (m)")
```

```{r displaying point data in river locations}
zoomtoseg(seg=c(23, 20), rivers= dry_flowlines_fine_UTMZONE18N)
points(res_dry$POINT_X, res_dry$POINT_Y, pch=16, col="red")
riverpoints(seg=dry_segvert$seg, vert=dry_segvert$vert, rivers= dry_flowlines_fine_UTMZONE18N, 
            pch=15, 
            col="blue")
```

```{r prepare for and calculate distance moved}

nrow(res_dry)  # Total points before snapping
nrow(dry_segvert)  # Total points successfully snapped

# Assign row numbers
dry_segvert <- dry_segvert %>%
  mutate(Rownumber = row_number()) 

# Merge snapped points back with the original dataset using row numbers
dry_locations <- left_join(res_dry %>% select(Rownumber, radioID, trackedTime_EST, POINT_X, POINT_Y), 
                               dry_segvert, 
                               by = "Rownumber")

# Organize dataset
dry_locations <- dry_locations %>%
  select(radioID, trackedTime_EST, POINT_X, POINT_Y, snap_x, snap_y, seg, vert, snapdist)

# Arrange data by fish ID and datetime to ensure chronological order
dry_locations <- dry_locations %>%
  arrange(radioID, trackedTime_EST)

# Check for duplicate rows
duplicates <- dry_locations %>%
  group_by(radioID, trackedTime_EST) %>%
  filter(n() > 1)

print(duplicates)

# Initialize a column for movement distance
dry_locations$distMoved_m <- NA

# Loop through each fish and calculate movement distance
for (fish in unique(dry_locations$radioID)) {
  fish_data <- dry_locations[dry_locations$radioID == fish, ]  # Subset data for the fish
  
  if (nrow(fish_data) > 1) {
    for (i in 2:nrow(fish_data)) {
      # Get previous and current locations
      from_seg <- fish_data$seg[i - 1]
      from_vert <- fish_data$vert[i - 1]
      to_seg <- fish_data$seg[i]
      to_vert <- fish_data$vert[i]
      
      # Calculate distance
      dist <- riverdistance(startseg = from_seg, startvert = from_vert, 
                            endseg = to_seg, endvert = to_vert, 
                            rivers = dry_flowlines_fine_UTMZONE18N, stopiferror = FALSE)
      
      # Store the result
      dry_locations$distMoved_m[dry_locations$radioID == fish & dry_locations$trackedTime_EST == fish_data$trackedTime_EST[i]] <- dist
    }
  }
}

# Replace NAs (first observation for each fish) with 0
dry_locations$distMoved_m[is.na(dry_locations$distMoved_m)] <- 0

```

```{r histogram of distance moved}
hist(dry_locations$distMoved_m, main="distance moved (m)")
```

### Amethyst Brook

1. Load your flowline shapefiles (do this for each watershed separately)

```{r Load in watershed flowlines}

amethyst_flowlines <- lines <- st_read("C:/Users/jpilchik/OneDrive - DOI/Documents/My study plan/Tagging/Tracking/streamShapeFiles/Riverdist MA BKT/Shapefiles/NHDFlowline_AmethystBrook.shp") # Reads shapefile, these shapefiles are already in geographic coordinate system NAD83
st_crs(amethyst_flowlines) # This just checks to make sure that your lines are in GCS NAD83
amethyst_flowlines <- st_transform(amethyst_flowlines, 26918) # Projects to UTM Zone 18N (the code for this is 26918)

# Subdivide the river lines into finer segments (e.g., 0.5-meter resolution)
amethyst_flowlines_fine <- st_segmentize(amethyst_flowlines, dfMaxLength = 0.5)

## Please read note before running next line! Comment the next line out if you already reprojected the raw shapefile.
#st_write(amethyst_flowlines_fine, "C:/Users/jpilchik/OneDrive - DOI/Documents/My study plan/Tagging/Tracking/streamShapeFiles/Riverdist MA BKT/Shapefiles/NHDFlowline_AmethystBrook_UTMZONE18N_Finer.shp") #Once you run this, it will add a new shapefile to your "shapefiles" folder! It will give you a warning if it's already done. I did it for underhill already, but you'll need to repeat this process for each watershed. 


amethyst_flowlines_fine_UTMZONE18N <- line2network(path = "C:/Users/jpilchik/OneDrive - DOI/Documents/My study plan/Tagging/Tracking/streamShapeFiles/Riverdist MA BKT/Shapefiles", # Points to the folder in your R Project folder
                                    layer = "NHDFlowline_AmethystBrook_UTMZONE18N_Finer", # Identifies the shapefile you want to pull from folder
                                    tolerance = 1) # This is the spatial tolerance used to determine connectivity between line segments) 


plot(x=amethyst_flowlines_fine_UTMZONE18N) # checks imported line
topologydots(rivers = amethyst_flowlines_fine_UTMZONE18N) # checks line topology

# Setting the MOUTH of your watershed allows you to look at directional movement. The "seg = " value will be the segment that includes your mouth, which you can observe in the plot function above. In Underhill, it's segment 46. The "vert = " value identifies the correct node of that segment. Using "showends" on the segment you want will show you what vertex to select.
plot(x=amethyst_flowlines_fine_UTMZONE18N)
showends(seg = 411, rivers = amethyst_flowlines_fine_UTMZONE18N) # identifies the true mouth of your watershed
amethyst_mouth <- setmouth(seg = 411, vert = 3984, rivers = amethyst_flowlines_fine_UTMZONE18N) # sets the mouth to the segment and vertex you need.

```

2. Load your fish points for the watershed you are analyzing (do this for each watershed separately)
```{r Load in fish points}

# read in your fish points and filter by the watershed you're looking at. Make sure to have X and Y columns available in decimal degrees

# Keep only points from "AMETHYST", "BUFFAM", and "HARRIS" and also remove rows where lat or lon are NA
amethyst_points <- tracking_data_locations %>%
  filter((river == "AMETHYST" | river == "BUFFAM" | river == "HARRIS") & !is.na(lon) & !is.na(lat))

# Make Lat Lon columns numeric

amethyst_points_spatial <- amethyst_points %>% 
  mutate(POINT_Y = as.numeric(lat)) %>% # change to whatever your Y coord column is
  mutate(POINT_X = as.numeric(lon)) # change to whatever your X coord column is
coordinates(amethyst_points_spatial) <- c("POINT_X","POINT_Y") # identifies the coordinate columns
proj4string(amethyst_points_spatial) <- CRS("+proj=longlat +datum=WGS84") 
res_amethyst <- spTransform(amethyst_points_spatial, CRS("+proj=utm +zone=18 +ellps=WGS84")) # reprojects the points to UTM ZONE 18
as(res_amethyst, "SpatialPoints")
res_amethyst <- as.data.frame(res_amethyst)
res_amethyst <- res_amethyst %>% 
  rename(POINT_X = coords.x1, POINT_Y = coords.x2) %>%  # Rename coords.x1 and coords.x2
  mutate(Rownumber =row_number())
amethyst_segvert <- xy2segvert(x = res_amethyst$POINT_X, y = res_amethyst$POINT_Y, rivers = amethyst_flowlines_fine_UTMZONE18N) # change the "res$" to your X and Y coord columns
  
## Display raw points (red dots) and snapped points (blue). Run these three lines all at once
plot(x= amethyst_flowlines_fine_UTMZONE18N)
points(res_amethyst$POINT_X, res_amethyst$POINT_Y, pch=16, col="red") # shows raw points
riverpoints(seg = amethyst_segvert$seg, vert = amethyst_segvert$vert, rivers = amethyst_flowlines_fine_UTMZONE18N, pch = 15, col="blue")


```



```{r snapping distance}
hist(amethyst_segvert$snapdist, main="snapping distance (m)")
```

```{r displaying point data in river locations}
zoomtoseg(seg=c(409, 280), rivers= amethyst_flowlines_fine_UTMZONE18N)
points(res_amethyst$POINT_X, res_amethyst$POINT_Y, pch=16, col="red")
riverpoints(seg=amethyst_segvert$seg, vert=amethyst_segvert$vert, rivers= amethyst_flowlines_fine_UTMZONE18N, 
            pch=15, 
            col="blue")
```

```{r prepare for and calculate distance moved}

nrow(res_amethyst)  # Total points before snapping
nrow(amethyst_segvert)  # Total points successfully snapped

# Assign row numbers
amethyst_segvert <- amethyst_segvert %>%
  mutate(Rownumber = row_number()) 

# Merge snapped points back with the original dataset using row numbers
amethyst_locations <- left_join(res_amethyst %>% select(Rownumber, radioID, trackedTime_EST, POINT_X, POINT_Y), 
                               amethyst_segvert, 
                               by = "Rownumber")

# Organize dataset
amethyst_locations <- amethyst_locations %>%
  select(radioID, trackedTime_EST, POINT_X, POINT_Y, snap_x, snap_y, seg, vert, snapdist)

# Arrange data by fish ID and datetime to ensure chronological order
amethyst_locations <- amethyst_locations %>%
  arrange(radioID, trackedTime_EST)

# Check for duplicate rows
duplicates <- amethyst_locations %>%
  group_by(radioID, trackedTime_EST) %>%
  filter(n() > 1)

print(duplicates)

# Initialize a column for movement distance
amethyst_locations$distMoved_m <- NA

# Loop through each fish and calculate movement distance
for (fish in unique(amethyst_locations$radioID)) {
  fish_data <- amethyst_locations[amethyst_locations$radioID == fish, ]  # Subset data for the fish
  
  if (nrow(fish_data) > 1) {
    for (i in 2:nrow(fish_data)) {
      # Get previous and current locations
      from_seg <- fish_data$seg[i - 1]
      from_vert <- fish_data$vert[i - 1]
      to_seg <- fish_data$seg[i]
      to_vert <- fish_data$vert[i]
      
      # Calculate distance
      dist <- riverdistance(startseg = from_seg, startvert = from_vert, 
                            endseg = to_seg, endvert = to_vert, 
                            rivers = amethyst_flowlines_fine_UTMZONE18N, stopiferror = FALSE)
      
      # Store the result
      amethyst_locations$distMoved_m[amethyst_locations$radioID == fish & amethyst_locations$trackedTime_EST == fish_data$trackedTime_EST[i]] <- dist
    }
  }
}

# Replace NAs (first observation for each fish) with 0
amethyst_locations$distMoved_m[is.na(amethyst_locations$distMoved_m)] <- 0

```


```{r histogram of distance moved}
hist(amethyst_locations$distMoved_m, main="distance moved (m)")
```

### Combine location files

```{r recombine all files back into original file}
river_locations <- bind_rows(underhill_locations, dickey_locations, dry_locations, amethyst_locations)
tracking_data_locations <- left_join(tracking_data_locations, river_locations, 
                                           by = c("radioID", "trackedTime_EST"))
tracking_data_locations <- tracking_data_locations %>%
  select(date, trackedTime_EST, river, shift, radioID, tempID, status, power, source, fishNotes, distMoved_m, lon, lat, POINT_X, POINT_Y, snap_x, snap_y, seg, vert, snapdist, habitat, habitatExtra, position, substrate, substrateExtra, shade, airTemp_F, cloud, precip, ftDischarge_cfs, ftTime_EST, startTime_EST, endTime_EST, streamNotes, downstreamGPS, downstreamGain, upstreamGPS, upstreamGain, isoID, length_mm, weight_g, sex, type, geneticSam, blood, section, collectionNotes)

# Write the combined data to a new CSV file
write.csv(tracking_data_locations, 
          "C:/Users/jpilchik/OneDrive - DOI/Documents/My study plan/Tagging/Tracking/radio_tracking_2024/data/combined_data/tracking_data_locations_fine.csv", 
          row.names = FALSE)
```

```{r histogram of distance moved}
hist(tracking_data_locations$distMoved_m, main="distance moved (m)")
```

```{r}
# Histogram of distance moved

ggplot(tracking_data_locations, aes(x = distMoved_m)) +
  geom_histogram(binwidth = 10, fill = "steelblue", color = "black") +  # Adjust binwidth as needed
  labs(title = "Histogram of Distance Moved Between Observations",
       x = "Distance Moved (m)", 
       y = "Frequency") +
  theme_minimal()
```

```{r}
# Calculate movement rate (meters per hour)

# Convert trackedTime_EST to POSIXct if not already
tracking_data_locations <- tracking_data_locations %>%
  arrange(radioID, trackedTime_EST) %>%  # Ensure it's ordered
  mutate(trackedTime_EST = as.POSIXct(trackedTime_EST, format="%Y-%m-%d %H:%M:%S")) %>%
  group_by(radioID) %>%
  mutate(time_diff = as.numeric(difftime(trackedTime_EST, lag(trackedTime_EST), units = "hours")),
         movement_rate = ifelse(time_diff > 0, distMoved_m / time_diff, NA)) %>%  # Avoid division by zero
  ungroup()

# Remove first sightings (where movement_rate is NA)
tracking_data_locations_filtered <- tracking_data_locations %>% filter(!is.na(movement_rate))
```

```{r}
# Plot a histogram of movement rate (meters per hour)

ggplot(tracking_data_locations_filtered, aes(x = movement_rate)) +
  geom_histogram(binwidth = 10, fill = "steelblue", color = "black") +  # Adjust binwidth as needed
  labs(title = "Histogram of Movement Rate",
       x = "Movement Rate (m/hour)", 
       y = "Frequency") +
  theme_minimal()
```

```{r}
# Density plot

ggplot(tracking_data_locations_filtered, aes(x = movement_rate)) +
  geom_density(fill = "lightblue", alpha = 0.5) +
  labs(title = "Density Plot of Movement Rate",
       x = "Movement Rate (m/hour)", 
       y = "Density") +
  theme_minimal()
```

```{r}
#Boxplot of movement rate (m/hour)

tracking_data_locations_filtered$river <- as.factor(tracking_data_locations_filtered$river)

ggplot(tracking_data_locations_filtered, aes(x = river, y = movement_rate)) + 
  geom_boxplot()

```


```{r}
# Calculate movement rate (meters per minute)

# Convert trackedTime_EST to POSIXct if not already
tracking_data_locations <- tracking_data_locations %>%
  arrange(radioID, trackedTime_EST) %>%  # Ensure it's ordered
  mutate(trackedTime_EST = as.POSIXct(trackedTime_EST, format="%Y-%m-%d %H:%M:%S")) %>%
  group_by(radioID) %>%
  mutate(time_diff = as.numeric(difftime(trackedTime_EST, lag(trackedTime_EST), units = "mins")),
         movement_rate = ifelse(time_diff > 0, distMoved_m / time_diff, NA)) %>%  # Avoid division by zero
  ungroup()

# Remove first sightings (where movement_rate is NA)
tracking_data_locations_filtered <- tracking_data_locations %>% filter(!is.na(movement_rate))
```

```{r}
# Plot a histogram of movement rate (meters per minute)

ggplot(tracking_data_locations_filtered, aes(x = movement_rate)) +
  geom_histogram(binwidth = 1, fill = "steelblue", color = "black") +  # Adjust binwidth as needed
  labs(title = "Histogram of Movement Rate",
       x = "Movement Rate (m/minute)", 
       y = "Frequency") +
  theme_minimal()
```
```{r}
tracking_data_locations_filtered$river <- as.factor(tracking_data_locations_filtered$river)

ggplot(tracking_data_locations, aes(x = river, y = movement_rate)) + 
  geom_boxplot()
```


```{r}
# Grouping habitat by locations using seg and vert
habitat_summary <- tracking_data_locations %>%
  group_by(river, seg, vert) %>%
  summarise(habitat_list = paste(unique(habitat), collapse = ", ")) %>%
  ungroup()

# View the result
head(habitat_summary)

```




The accuracy of seg and vert for detecting subtle fish movements depends on how your river network was built in riverdist. Here’s what you should consider when determining whether seg and vert can capture fine-scale movements:

1. Understanding seg and vert in riverdist
-seg (segment): Represents a section of the river between two junctions or bends.
-vert (vertex): Represents a specific point along a segment, based on how the river network was digitized.
-The resolution of vert along a seg determines how precisely fish movements can be tracked.

To check your river network resolution:
```{r}
# To check my river network resolution
summary(amethyst_flowlines_fine_UTMZONE18N)  # See number of segments and vertices
summary(dickey_flowlines_fine_UTMZONE18N)  # See number of segments and vertices
summary(dry_flowlines_fine_UTMZONE18N)  # See number of segments and vertices
summary(underhill_flowlines_fine_UTMZONE18N)  # See number of segments and vertices
```
If the number of vertices per segment is low, movements within a segment (like from stream edge to center) may not be distinguishable.

```{r}
# Check number of vertices per segment
amethyst_vertex_counts <- sapply(amethyst_flowlines_fine_UTMZONE18N$cumuldist, length)

# Summary statistics of vertex counts
summary(amethyst_vertex_counts)

# Check number of vertices per segment
underhill_vertex_counts <- sapply(underhill_flowlines_fine_UTMZONE18N$cumuldist, length)

# Summary statistics of vertex counts
summary(underhill_vertex_counts)

# Check number of vertices per segment
dickey_vertex_counts <- sapply(dickey_flowlines_fine_UTMZONE18N$cumuldist, length)

# Summary statistics of vertex counts
summary(dickey_vertex_counts)

# Check number of vertices per segment
dry_vertex_counts <- sapply(dry_flowlines_fine_UTMZONE18N$cumuldist, length)

# Summary statistics of vertex counts
summary(dry_vertex_counts)

# If the minimum vertex count is low (e.g., 2-3 per segment), your resolution may be too coarse.
# If the mean or median vertex count is high (e.g., 20+ per segment), you likely have good resolution

```
```{r}
# Compute spacing between vertices within each segment
amethyst_vertex_spacing <- sapply(amethyst_flowlines_fine_UTMZONE18N$cumuldist, function(x) if (length(x) > 1) mean(diff(x)) else NA)

# Summary of spacing
summary(amethyst_vertex_spacing)

# Compute spacing between vertices within each segment
underhill_vertex_spacing <- sapply(underhill_flowlines_fine_UTMZONE18N$cumuldist, function(x) if (length(x) > 1) mean(diff(x)) else NA)

# Summary of spacing
summary(underhill_vertex_spacing)

# Compute spacing between vertices within each segment
dickey_vertex_spacing <- sapply(dickey_flowlines_fine_UTMZONE18N$cumuldist, function(x) if (length(x) > 1) mean(diff(x)) else NA)

# Summary of spacing
summary(dickey_vertex_spacing)

# Compute spacing between vertices within each segment
dry_vertex_spacing <- sapply(dry_flowlines_fine_UTMZONE18N$cumuldist, function(x) if (length(x) > 1) mean(diff(x)) else NA)

# Summary of spacing
summary(dry_vertex_spacing)

# If spacing is large (e.g., >10-20m), small fish movements may not be captured.
# If spacing is small (e.g., <5m), seg and vert should work fine.
```

2. Can seg and vert Detect Small-Scale Movements?
-If your river network has a high vertex density (many vert per seg), subtle movements might be detectable.
-If vertices are spaced far apart, then small movements may not result in a vert change.
-If fish move within the same segment (seg) and between vertices (vert), but the distance is minimal, your calculated movement may be 0 meters even if the fish actually moved.

3. Alternative: Using snapdist for Fine-Scale Movements
snapdist (distance from original GPS point to snapped river location) might help detect fine movements:
-If fish move from the stream edge to the center, seg and vert might not change, but snapdist should.
-You could calculate movement using changes in snapdist between consecutive detections:
```{r}
tracking_data_locations <- tracking_data_locations %>%
  group_by(radioID) %>%
  arrange(trackedTime_EST) %>%
  mutate(snapdist_change = abs(snapdist - lag(snapdist))) %>%
  ungroup()
```
-If snapdist_change is small but seg and vert don’t change, it suggests subtle within-segment movement.

