---
title: "Receiver Data Analysis for Cami"
---

```{r load libraries}
library(lubridate)
library(dplyr)
```

# Preparing lotek data files for analysis

## Lotek receiver 000900 data

```{r processing the lotek receiver 000900 ID only data}

# ID Only Data ###########################################################

# Read the dataset
## Use your own file path
receiver_000900_raw_data <- read.delim("C:/Users/jpilchik/OneDrive - DOI/Documents/My study plan/Tagging/Tracking/rawLotekData/000900/20240903/000900_20240903.txt")


# Rename the single column in the dataset as "columnOne"
names(receiver_000900_raw_data) <- c("columnOne")


# Detect the start of the row that says "ID Only Records:" and create a flag
receiver_000900_ID_data <- receiver_000900_raw_data %>% 
  mutate(column2 = ifelse(columnOne == "ID Only Records:", 1, 0)) 


# Detect the start of row that says "ID + GPS Positions:"
id_gps_row <- which(receiver_000900_raw_data$columnOne == "ID + GPS Positions:")


# If "ID + GPS Positions:" is found, slice until the row before it
if(length(id_gps_row) > 0) {
  id_gps_row <- id_gps_row[1] - 1  # One row before "ID + GPS Positions:"
} else {
  id_gps_row <- nrow(receiver_000900_raw_data)  # If "ID + GPS Positions:" not found, slice till the bottom
}


# Slice out the ID data by detecting the start and extracting relevant rows
receiver_000900_ID_data <- receiver_000900_ID_data %>% 
  slice((which(grepl(1, receiver_000900_ID_data$column2)) + 2) : id_gps_row)


receiver_000900_ID_data <- receiver_000900_ID_data %>% 
  # Split the initial columns based on space separation
  separate(columnOne , c("Date", "Time", "Channel", "Tag ID", "Antenna", "Power"), 
           extra = "merge", sep = "\\s+")

 
receiver_000900_ID_data <- receiver_000900_ID_data %>% 
  # Select the columns for further processing
  select("Date", "Time", "Tag ID", "Power") 


# Combine the date and time into a DateTime column
receiver_000900_ID_data$dateTime_EST <- as.POSIXct(paste(receiver_000900_ID_data$Date, 
                                                         receiver_000900_ID_data$Time), 
                                                   format="%m/%d/%y %H:%M:%S",
                                                   tz = "EST") 


receiver_000900_ID_data <- receiver_000900_ID_data %>% 
  # Rename "Tag ID' column as "tagID"
  rename_with(~ "tagID", .cols = `Tag ID`) %>%
  
  # Rename "Date' column as "date"
  rename_with(~ "date", .cols = `Date`) %>%
  
  # Rename "Power' column as "power"
  rename_with(~ "power", .cols = `Power`)


receiver_000900_ID_data <- receiver_000900_ID_data %>% 
  # Select the columns for further processing
  select("date", "tagID", "power", "dateTime_EST") 


receiver_000900_ID_data <- receiver_000900_ID_data %>%
  # Clean and format the data
  mutate(tagID = as.numeric(tagID),
         power = as.numeric(power),
         date = mdy(date),
         source = "lotek")


# Define the date range
start_date <- ymd("2024-06-11")  
end_date <- ymd("2024-08-29")   


# Define specific days to filter out based on the non-tracking days on the calendar
days_to_exclude <- ymd(c("2024-06-21", "2024-06-24", "2024-07-04", "2024-07-05", 
                         "2024-07-08", "2024-07-15", "2024-07-22", "2024-07-29", 
                         "2024-08-12","2024-08-19", "2024-08-28"))


receiver_000900_ID_data <- receiver_000900_ID_data %>% 
  # Filter by tagID range
  filter(tagID > 10 & tagID < 63) %>%
  
  # Filter by the date range
  filter(date >= start_date & date <= end_date) %>%
  
  # Filter out the specified days
  filter(!(date %in% days_to_exclude))


# Define the date ranges for different rivers to account for retagging
river_date_ranges <- tibble(
  river = c("AMETHYST", "UNDERHILL", "DICKEY", "DICKEY", 
            "DRY UPPER", "DRY UPPER"),
  tagID_range = list(c(59, 60, 56, 14, 61, 20, 12, 15, 
                       13, 57, 19, 62, 11, 58, 18), 
                     c(41, 43, 40, 44, 33, 34, 45, 35, 27, 36), 
                     c(50, 37, 38, 46, 26, 28, 51, 32, 29, 31),
                     c(50, 37, 38, 26, 28, 51, 32, 31),
                     c(42, 49, 55, 16, 52, 21, 47, 24, 
                       48, 22, 17, 25, 54, 23, 53),
                     c(29, 30, 46, 39)),
  start_date = ymd(c("2024-06-11", "2024-06-11", "2024-06-11", 
                     "2024-07-18", "2024-06-11", "2024-07-18")),
  end_date = ymd(c("2024-08-29", "2024-08-29", "2024-07-17", 
                   "2024-08-29", "2024-08-29", "2024-08-29"))
)


# Function to determine river based on tagID and date
assign_river <- function(tagID, date) {
  # Filter the river_date_ranges for matching tagID and date range
  river_info <- river_date_ranges %>%
    filter(map_lgl(tagID_range, ~ tagID %in% .) & date >= start_date & date <= end_date)
  
  if (nrow(river_info) > 0) {
    return(river_info$river[1])  # Return the matching river
  } else {
    return("Unknown")  # Default for no match
  }
}


# Ensure the 'date' column is in Date format
receiver_000900_ID_data$date <- ymd(receiver_000900_ID_data$date)


# Apply the function to the data frame
receiver_000900_ID_data <- receiver_000900_ID_data %>%
  mutate(river = mapply(assign_river, tagID, date))


# Remove rows where river is "Unknown"
receiver_000900_ID_data <- receiver_000900_ID_data %>%
  filter(river != "Unknown")


receiver_000900_ID_data <- receiver_000900_ID_data %>% 
  # Select the columns for the final dataframe
  select("dateTime_EST", "river", "tagID", "power") 


# View dataframe
head(receiver_000900_ID_data)

```

```{r processing the lotek receiver 000900 ID + GPS data}

# ID + GPS Data #########################################################

# Read the dataset
## Use your own file path
receiver_000900_raw_data <- read.delim("C:/Users/jpilchik/OneDrive - DOI/Documents/My study plan/Tagging/Tracking/rawLotekData/000900/20240903/000900_20240903.txt")


# Rename the single column in the dataset as "columnOne"
names(receiver_000900_raw_data) <- c("columnOne")


# Detect the start of the row that says "ID + GPS Positions:" and create a flag
receiver_000900_GPS_data <- receiver_000900_raw_data %>% 
  mutate(column2 = ifelse(columnOne == "ID + GPS Positions:", 1, 0)) 


# Detect the start of row that says "End of Data" 
end_of_data_row <- which(receiver_000900_raw_data$columnOne == "End of Data")


# If "End of Data" is found, slice until the row before it
if(length(end_of_data_row) > 0) {
  end_of_data_row <- end_of_data_row[1] - 1  # One row before "End of data"
} else {
  end_of_data_row <- nrow(receiver_000900_raw_data)  # If "End of data" not found, slice till the bottom
}


# Slice out the GPS data by detecting the start and extracting relevant rows
receiver_000900_GPS_data <- receiver_000900_GPS_data %>% 
  slice((which(grepl(1, receiver_000900_GPS_data$column2)) + 2) : end_of_data_row)


receiver_000900_GPS_data <- receiver_000900_GPS_data %>% 
  # Split the initial columns based on space separation
  separate(columnOne , c("Date", "Time", "Channel", "Tag ID", "Antenna", "Power"), 
           extra = "merge", sep = "\\s+")


receiver_000900_GPS_data <- receiver_000900_GPS_data %>% 
  # Separate the "Power" column into power, latitude, and longitude
  separate(Power, c("power", "lat", "lon"), sep = "\\s+") 


receiver_000900_GPS_data <- receiver_000900_GPS_data %>% 
  # Select the columns for further processing
  select("Date", "Time", "Tag ID", "power", "lon", "lat") 


# Combine the date and time into a DateTime column
receiver_000900_GPS_data$dateTime_EST <- as.POSIXct(paste(receiver_000900_GPS_data$Date, 
                                                          receiver_000900_GPS_data$Time), 
                                                    format="%m/%d/%y %H:%M:%S",
                                                    tz = "EST")


receiver_000900_GPS_data <- receiver_000900_GPS_data %>% 
  # Rename "Tag ID' column as "tagID"
  rename_with(~ "tagID", .cols = `Tag ID`) %>%
  
  # Rename "Date' column as "date"
  rename_with(~ "date", .cols = `Date`) 


receiver_000900_GPS_data <- receiver_000900_GPS_data %>% 
  # Select the columns for further processing
  select("date", "tagID", "power","lon", "lat", "dateTime_EST") 


receiver_000900_GPS_data <- receiver_000900_GPS_data %>%
  # Clean and format the data
  mutate(lat = as.numeric(lat), 
         lon = as.numeric(lon),
         tagID = as.numeric(tagID),
         power = as.numeric(power),
         date = mdy(date),
         source = "lotek")


# Define the date range
start_date <- ymd("2024-06-11")  
end_date <- ymd("2024-08-29")   


# Define specific days to filter out based on the non-tracking days on the calendar
days_to_exclude <- ymd(c("2024-06-21", "2024-06-24", "2024-07-04", "2024-07-05", 
                         "2024-07-08", "2024-07-15", "2024-07-22", "2024-07-29", 
                         "2024-08-12","2024-08-19", "2024-08-28"))


receiver_000900_GPS_data <- receiver_000900_GPS_data %>% 
  # Filter by tagID range
  filter(tagID > 10 & tagID < 63) %>%
  
  # Filter by the date range
  filter(date >= start_date & date <= end_date) %>%
  
  # Filter out the specified days
  filter(!(date %in% days_to_exclude))


# Define the date ranges for different rivers to account for retagging
river_date_ranges <- tibble(
  river = c("AMETHYST", "UNDERHILL", "DICKEY", "DICKEY", 
            "DRY UPPER", "DRY UPPER"),
  tagID_range = list(c(59, 60, 56, 14, 61, 20, 12, 15, 
                       13, 57, 19, 62, 11, 58, 18), 
                     c(41, 43, 40, 44, 33, 34, 45, 35, 27, 36), 
                     c(50, 37, 38, 46, 26, 28, 51, 32, 29, 31),
                     c(50, 37, 38, 26, 28, 51, 32, 31),
                     c(42, 49, 55, 16, 52, 21, 47, 24, 
                       48, 22, 17, 25, 54, 23, 53),
                     c(29, 30, 46, 39)),
  start_date = ymd(c("2024-06-11", "2024-06-11", "2024-06-11", 
                     "2024-07-18", "2024-06-11", "2024-07-18")),
  end_date = ymd(c("2024-08-29", "2024-08-29", "2024-07-17", 
                   "2024-08-29", "2024-08-29", "2024-08-29"))
)


# Function to determine river based on tagID and date
assign_river <- function(tagID, date) {
  # Filter the river_date_ranges for matching tagID and date range
  river_info <- river_date_ranges %>%
    filter(map_lgl(tagID_range, ~ tagID %in% .) & date >= start_date & date <= end_date)
  
  if (nrow(river_info) > 0) {
    return(river_info$river[1])  # Return the matching river
  } else {
    return("Unknown")  # Default for no match
  }
}


# Ensure the 'date' column is in Date format
receiver_000900_GPS_data$date <- ymd(receiver_000900_GPS_data$date)


# Apply the function to the data frame
receiver_000900_GPS_data <- receiver_000900_GPS_data %>%
  mutate(river = mapply(assign_river, tagID, date))


# Remove rows where river is "Unknown"
receiver_000900_GPS_data <- receiver_000900_GPS_data %>%
  filter(river != "Unknown")


receiver_000900_GPS_data <- receiver_000900_GPS_data %>% 
  # Select the columns for the final dataframe
  select("dateTime_EST", "river", "tagID", "power", "lon", "lat")


# View dataframe
head(receiver_000900_GPS_data)

```

```{r combining the lotek receiver 000900 data back into one dataframe}

# Combine back into one dataframe ########################################

# Combine the two final dataframes horizontally (by row, rather than by column)
receiver_000900_data <- bind_rows(receiver_000900_ID_data, receiver_000900_GPS_data)


# Clean workspace by removing excess variables
rm(river_date_ranges, receiver_000900_raw_data, receiver_000900_ID_data, receiver_000900_GPS_data)


# View dataframe
head(receiver_000900_data)

```


## Lotek receiver 000517 data
No ID+GPS data on this receiver - No combination needed

```{r processing the lotek receiver 000517 ID only data}

# ID Only Data ##########################################################

# Read the dataset
## Use your own file path
receiver_000517_raw_data <- read.delim("C:/Users/jpilchik/OneDrive - DOI/Documents/My study plan/Tagging/Tracking/rawLotekData/000517/20240912/000517_20240912.txt")


# Rename the single column in the dataset as "columnOne"
names(receiver_000517_raw_data) <- c("columnOne")


# Detect the start of the row that says "ID Only Records:" and create a flag
receiver_000517_ID_data <- receiver_000517_raw_data %>% 
  mutate(column2 = ifelse(columnOne == "ID Only Records:", 1, 0)) 


# Detect the start of row that says "End of Data" 
end_of_data_row <- which(receiver_000517_raw_data$columnOne == "End of Data")


# If "End of Data" is found, slice until the row before it
if(length(end_of_data_row) > 0) {
  end_of_data_row <- end_of_data_row[1] - 1  # One row before "End of data"
} else {
  end_of_data_row <- nrow(receiver_000517_raw_data)  # If "End of data" not found, slice till the bottom
}


# Slice out the data by detecting the start and extracting relevant rows
receiver_000517_ID_data <- receiver_000517_ID_data %>% 
  slice((which(grepl(1, receiver_000517_ID_data$column2)) + 2) : end_of_data_row)
    

receiver_000517_ID_data <- receiver_000517_ID_data %>% 
  # Split the initial columns based on space separation
  separate(columnOne , c("Date", "Time", "Channel", "Tag ID", "Antenna", "Power"), 
           extra = "merge", sep = "\\s+")
  

receiver_000517_ID_data <- receiver_000517_ID_data %>% 
  # Select the columns for further processing
  select("Date", "Time", "Tag ID", "Power") 
  

# Combine the date and time into a DateTime column
receiver_000517_ID_data$dateTime_EST <- as.POSIXct(paste(receiver_000517_ID_data$Date, 
                                                         receiver_000517_ID_data$Time), 
                                                   format="%m/%d/%y %H:%M:%S",
                                                   tz = "EST")


receiver_000517_ID_data <- receiver_000517_ID_data %>% 
  # Rename "Tag ID' column as "tagID"
  rename_with(~ "tagID", .cols = `Tag ID`) %>%
  
  # Rename "Date' column as "date"
  rename_with(~ "date", .cols = `Date`) %>%
  
  # Rename "Power' column as "power"
  rename_with(~ "power", .cols = `Power`)

  
receiver_000517_ID_data <- receiver_000517_ID_data %>% 
  # Select the columns for further processing
  select("date", "tagID", "power", "dateTime_EST") 


receiver_000517_ID_data <- receiver_000517_ID_data %>%
  # Clean and format the data
  mutate(tagID = as.numeric(tagID),
         power = as.numeric(power),
         date = mdy(date),
         source = "lotek")


# Define the date range
start_date <- ymd("2024-06-11")  
end_date <- ymd("2024-08-29")   


# Define specific days to filter out based on the non-tracking days on the calendar
days_to_exclude <- ymd(c("2024-06-21", "2024-06-24", "2024-07-04", "2024-07-05", 
                         "2024-07-08", "2024-07-15", "2024-07-22", "2024-07-29", 
                         "2024-08-12","2024-08-19", "2024-08-28"))  


receiver_000517_ID_data <- receiver_000517_ID_data %>% 
  # Filter by tagID range
  filter(tagID > 10 & tagID < 63) %>%
  
  # Filter by the date range
  filter(date >= start_date & date <= end_date) %>%
  
  # Filter out the specified days
  filter(!(date %in% days_to_exclude)) 


# Define the date ranges for different rivers to account for retagging
river_date_ranges <- tibble(
  river = c("AMETHYST", "UNDERHILL", "DICKEY", "DICKEY", 
            "DRY UPPER", "DRY UPPER"),
  tagID_range = list(c(59, 60, 56, 14, 61, 20, 12, 15, 
                       13, 57, 19, 62, 11, 58, 18), 
                     c(41, 43, 40, 44, 33, 34, 45, 35, 27, 36), 
                     c(50, 37, 38, 46, 26, 28, 51, 32, 29, 31),
                     c(50, 37, 38, 26, 28, 51, 32, 31),
                     c(42, 49, 55, 16, 52, 21, 47, 24, 
                       48, 22, 17, 25, 54, 23, 53),
                     c(29, 30, 46, 39)),
  start_date = ymd(c("2024-06-11", "2024-06-11", "2024-06-11", "2024-07-18", 
                         "2024-06-11", "2024-07-18")),
  end_date = ymd(c("2024-08-29", "2024-08-29", "2024-07-17", "2024-08-29", 
                       "2024-08-29", "2024-08-29"))
)


# Function to determine river based on tagID and date
assign_river <- function(tagID, date) {
  # Filter the river_date_ranges for matching tagID and date range
  river_info <- river_date_ranges %>%
    filter(map_lgl(tagID_range, ~ tagID %in% .) & date >= start_date & date <= end_date)
  
  if (nrow(river_info) > 0) {
    return(river_info$river[1])  # Return the matching river
  } else {
    return("Unknown")  # Default for no match
  }
}


# Ensure the 'date' column is in Date format
receiver_000517_ID_data$date <- ymd(receiver_000517_ID_data$date)


# Apply the function to the data frame
receiver_000517_ID_data <- receiver_000517_ID_data %>%
  mutate(river = mapply(assign_river, tagID, date))


# Remove rows where river is "Unknown"
receiver_000517_ID_data <- receiver_000517_ID_data %>%
  filter(river != "Unknown")


receiver_000517_ID_data <- receiver_000517_ID_data %>% 
  # Select the columns for the final dataframe
  select("dateTime_EST", "river", "tagID", "power") 


# Clean workspace by removing excess variables
rm(receiver_000517_raw_data, river_date_ranges)


# View dataframe
head(receiver_000517_ID_data)

```

## Combine all data from all receivers

```{r combine data from the multiple receivers}

# Combine multiple receivers into one dataframe ########################################

# Combine the two final dataframes horizontally (by row, rather than by column)
receiver_data_all <- bind_rows(receiver_000900_data, receiver_000517_ID_data)


# Clean workspace by removing excess variables
rm(receiver_000900_data, receiver_000517_ID_data)


# View dataframe
head(receiver_data_all)


# Write the dataframe into a csv
## Use your own file path
write.csv(receiver_data_all, 
          "C:/Users/jpilchik/OneDrive - DOI/Documents/My study plan/Tagging/Tracking/rawLotekData/receiver_data_all.csv", 
          row.names = FALSE)

```