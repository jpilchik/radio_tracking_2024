---
title: "QAQC receiver/iPad data"
---

```{r load libraries}
# Load required libraries
library(dplyr)
library(lubridate)
```

```{r read in the data}
# Read in the data
tracking_data_all <- read.csv("C:/Users/jpilchik/OneDrive - DOI/Documents/My study plan/Tagging/Tracking/radio_tracking_2024/data/combined_data/tracking_data_all.csv")
```

```{r format the data}

# Convert 'trackedTime_EST' to datetime format
tracking_data_all$trackedTime_EST <- as.POSIXct(tracking_data_all$trackedTime_EST, 
                                      format = "%Y-%m-%d %H:%M:%S",
                                      tz = "EST")

# Convert 'date' to date format
tracking_data_all$date <- ymd(tracking_data_all$date)

```

```{r create filtered dataset of matching receiver/iPad points, all iPad points, and select unmatched receiver points}

# Step 1: Filter to keep all iPad points
ipad_points <- tracking_data_all %>%
  filter(source == "iPad" | is.na(source))

# Debugging: Check the iPad points
print("iPad Points (including NA in source):")
print(ipad_points)

# Step 2: Select receiver points for each matching iPad point with the highest power
closest_receiver_points <- tracking_data_all %>%
  filter(source == "receiver") %>%
  inner_join(ipad_points, by = "radioID", suffix = c(".receiver", ".ipad")) %>%
  filter(abs(difftime(trackedTime_EST.receiver, trackedTime_EST.ipad, units = "mins")) <= 10) %>%
  group_by(trackedTime_EST.ipad, radioID) %>%
  # Ensure 'power' is treated as numeric and select the receiver point with the highest power
  slice(which.max(as.numeric(power.receiver))) %>%
  ungroup()

# Debugging: Check how many closest receiver points were found
print("Closest Receiver Points with Highest Power:")
print(closest_receiver_points)

# Now select the correct columns from closest receiver points
closest_receiver_points <- closest_receiver_points %>%
  select(date = date.receiver, 
         trackedTime_EST.receiver, 
         river = river.receiver, 
         shift = shift.receiver,
         radioID, 
         tempID = tempID.receiver,
         power = power.receiver, 
         source = source.receiver,
         fishNotes = fishNotes.receiver,
         lon = lon.receiver,
         lat = lat.receiver,
         habitat = habitat.receiver,
         habitatExtra = habitatExtra.receiver,
         position = position.receiver,
         substrate = substrate.receiver,
         substrateExtra = substrateExtra.receiver,
         shade = shade.receiver,
         airTemp = airTemp.receiver,
         cloud = cloud.receiver,
         precip = precip.receiver,
         totalDischarge = totalDischarge.receiver,
         ftTime_EST = ftTime_EST.receiver,
         startTime_EST = startTime_EST.receiver,
         endTime_EST = endTime_EST.receiver,
         streamNotes = streamNotes.receiver,
         downstreamGPS = downstreamGPS.receiver,
         downstreamGain = downstreamGain.receiver,
         upstreamGPS = upstreamGPS.receiver,
         upstreamGain = upstreamGain.receiver,
         isoID = isoID.receiver,
         isoTime_EST = isoTime_EST.receiver,
         length = length.receiver,
         weight = weight.receiver,
         sex = sex.receiver,
         type = type.receiver,
         geneticSam = geneticSam.receiver,
         blood = blood.receiver,
         section = section.receiver,
         collectionNotes = collectionNotes.receiver) %>% 
  mutate(source = "receiver")

# Step 3: Select one representative receiver point for unmatched receiver points
unmatched_receivers <- tracking_data_all %>%
  filter(source == "receiver") %>%
  anti_join(ipad_points, by = "radioID") %>%
  group_by(date, shift, radioID) %>%
  slice(which.max(power)) %>%
  ungroup()

# Combine the results
tracking_data_filtered <- bind_rows(
  ipad_points,
  closest_receiver_points %>% mutate(source = "receiver"),
  unmatched_receivers %>% mutate(source = "receiver")
)

# Ensure that the trackedTime_EST is consistent and that receiver data columns are retained
tracking_data_filtered <- tracking_data_filtered %>%
  mutate(
    # Consolidate the trackedTime_EST column
    trackedTime_EST = coalesce(trackedTime_EST, trackedTime_EST.receiver)
  ) %>%
  select(date, trackedTime_EST, river, shift, radioID, 
         tempID, power, source, fishNotes, lon, lat, 
         habitat, habitatExtra, position, substrate, 
         substrateExtra, shade, airTemp, cloud, precip, 
         totalDischarge, ftTime_EST, startTime_EST, endTime_EST, streamNotes,
         downstreamGPS, downstreamGain, upstreamGPS, upstreamGain, 
         isoID, isoTime_EST, length, weight, sex, type, geneticSam, 
         blood, section, collectionNotes, trackedTime_EST.receiver) 

# Check for any remaining inconsistencies
inconsistent_rows <- tracking_data_filtered %>%
  filter(is.na(trackedTime_EST) | (source == "receiver" & is.na(trackedTime_EST.receiver)))

# Check the rows
print("Inconsistent Rows:")
print(inconsistent_rows)

# Remove 'trackedTime_EST.receiver' from the dataset
tracking_data_filtered <- tracking_data_filtered %>%
  select(-trackedTime_EST.receiver)  

# View the final cleaned dataset
print(tracking_data_filtered)

# Write new csv
write.csv(tracking_data_filtered, 
          file = "C:/Users/jpilchik/OneDrive - DOI/Documents/My study plan/Tagging/Tracking/radio_tracking_2024/data/tracking_data_filtered.csv", 
          row.names = FALSE)

```

```{r create filtered dataset of matching receiver/iPad points, all iPad points, and select unmatched receiver points 2.0}

# Step 1: Filter to keep all iPad points
ipad_points <- tracking_data_all %>%
  filter(source == "iPad" | is.na(source))

# Debugging: Check the iPad points
print("iPad Points (including NA in source):")
print(ipad_points)

# Step 2: Select receiver points for each matching iPad point with the highest power
closest_receiver_points <- tracking_data_all %>%
  filter(source == "receiver") %>%
  inner_join(ipad_points, by = "radioID", suffix = c(".receiver", ".ipad")) %>%
  filter(abs(difftime(trackedTime_EST.receiver, trackedTime_EST.ipad, units = "mins")) <= 10) %>%
  group_by(trackedTime_EST.ipad, radioID) %>%
  # Ensure 'power' is treated as numeric and select the receiver point with the highest power
  slice(which.max(as.numeric(power.receiver))) %>%
  ungroup()

# Debugging: Check how many closest receiver points were found
print("Closest Receiver Points with Highest Power:")
print(closest_receiver_points)

# Now select the correct columns from closest receiver points
closest_receiver_points <- closest_receiver_points %>%
  select(date = date.receiver, 
         trackedTime_EST.receiver, 
         river = river.receiver, 
         shift = shift.receiver,
         radioID, 
         tempID = tempID.receiver,
         power = power.receiver, 
         source = source.receiver,
         fishNotes = fishNotes.receiver,
         lon = lon.receiver,
         lat = lat.receiver,
         habitat = habitat.receiver,
         habitatExtra = habitatExtra.receiver,
         position = position.receiver,
         substrate = substrate.receiver,
         substrateExtra = substrateExtra.receiver,
         shade = shade.receiver,
         airTemp = airTemp.receiver,
         cloud = cloud.receiver,
         precip = precip.receiver,
         totalDischarge = totalDischarge.receiver,
         ftTime_EST = ftTime_EST.receiver,
         startTime_EST = startTime_EST.receiver,
         endTime_EST = endTime_EST.receiver,
         streamNotes = streamNotes.receiver,
         downstreamGPS = downstreamGPS.receiver,
         downstreamGain = downstreamGain.receiver,
         upstreamGPS = upstreamGPS.receiver,
         upstreamGain = upstreamGain.receiver,
         isoID = isoID.receiver,
         isoTime_EST = isoTime_EST.receiver,
         length = length.receiver,
         weight = weight.receiver,
         sex = sex.receiver,
         type = type.receiver,
         geneticSam = geneticSam.receiver,
         blood = blood.receiver,
         section = section.receiver,
         collectionNotes = collectionNotes.receiver) %>% 
  mutate(source = "receiver")

# Step 3: Select one representative receiver point for unmatched receiver points
unmatched_receivers <- tracking_data_all %>%
  filter(source == "receiver") %>%
  anti_join(ipad_points, by = "radioID") %>%
  group_by(date, shift, radioID) %>%
  slice(which.max(power)) %>%
  ungroup()

# Combine the results
tracking_data_filtered_2.0 <- bind_rows(
  ipad_points,
  closest_receiver_points %>% mutate(source = "receiver"),
  unmatched_receivers %>% mutate(source = "receiver")
)

# Ensure that the trackedTime_EST is consistent and that receiver data columns are retained
tracking_data_filtered_2.0 <- tracking_data_filtered_2.0 %>%
  mutate(
    # Consolidate the trackedTime_EST column
    trackedTime_EST = coalesce(trackedTime_EST, trackedTime_EST.receiver)
  ) %>%
  select(date, trackedTime_EST, river, shift, radioID, 
         tempID, power, source, fishNotes, lon, lat, 
         habitat, habitatExtra, position, substrate, 
         substrateExtra, shade, airTemp, cloud, precip, 
         totalDischarge, ftTime_EST, startTime_EST, endTime_EST, streamNotes,
         downstreamGPS, downstreamGain, upstreamGPS, upstreamGain, 
         isoID, isoTime_EST, length, weight, sex, type, geneticSam, 
         blood, section, collectionNotes, trackedTime_EST.receiver) 

# Check for any remaining inconsistencies
inconsistent_rows <- tracking_data_filtered_2.0 %>%
  filter(is.na(trackedTime_EST) | (source == "receiver" & is.na(trackedTime_EST.receiver)))

# Check the rows
print("Inconsistent Rows:")
print(inconsistent_rows)

# Remove 'trackedTime_EST.receiver' from the dataset
tracking_data_filtered_2.0 <- tracking_data_filtered_2.0 %>%
  select(-trackedTime_EST.receiver)  

# Remove duplicate rows
tracking_data_filtered_2.0 <- tracking_data_filtered_2.0 %>%
  distinct()

# View the final cleaned dataset
print(tracking_data_filtered_2.0)

# Write new csv
write.csv(tracking_data_filtered_2.0, 
          file = "C:/Users/jpilchik/OneDrive - DOI/Documents/My study plan/Tagging/Tracking/radio_tracking_2024/data/tracking_data_filtered_2.0.csv", 
          row.names = FALSE)

```


```{r determine matched vs unmatched receiver/iPad points}

# Define the start date for comparison
start_date <- ymd("2024-06-25") 

# Function to check if there's a matching receiver point for each iPad point, considering the start date
check_matching_receiver <- function(ipad_time, ipad_id) {
  # Check for NA values in ipad_time and handle them
  if (is.na(ipad_time)) {
    return(NA)  # If the iPad time is NA, return NA
  }
  
  # Only consider iPad points that are on or after the start date
  if (as.Date(ipad_time) >= start_date) {
    receiver_data <- tracking_data_all %>%
      filter(source == "receiver",
             radioID == ipad_id,
             abs(difftime(trackedTime_EST, ipad_time, units = "mins")) <= 10)
    
    # Return TRUE if a matching receiver point exists, otherwise FALSE
    return(nrow(receiver_data) > 0)
  } else {
    # If before the start date, return NA or FALSE based on your preference
    return(NA)
  }
}

# Add a new column to check for matches
tracking_data_all <- tracking_data_all %>%
  mutate(has_matching_receiver = ifelse(source == "iPad",
                                        mapply(check_matching_receiver, 
                                               trackedTime_EST, 
                                               radioID),
                                        NA))

# Check the results for iPad points after the start date
matching_summary <- tracking_data_all %>%
  filter(source == "iPad", date >= start_date) %>%
  select(trackedTime_EST, 
         radioID, 
         has_matching_receiver)

print(matching_summary)

# Write new csv
write.csv(matching_summary, 
          file = "C:/Users/jpilchik/OneDrive - DOI/Documents/My study plan/Tagging/Tracking/radio_tracking_2024/data/QAQC/matching_summary.csv", 
          row.names = FALSE)

```




```{r create a dataset of all receiver and iPad values that don't have a matching iPad or receiver value respectively}

# Define the start date for comparison
start_date <- ymd("2024-06-25") 

# Step 1: Identify unmatched receiver points
unmatched_receivers <- tracking_data_all %>%
  filter(source == "receiver") %>%
  anti_join(ipad_points, by = c("radioID", "date", "shift")) %>%  # Ensure date and shift are also used for matching
  group_by(date, shift, radioID) %>%
  slice(which.max(power)) %>%  # Keep the one with the highest power
  ungroup()

# Step 2: Identify unmatched iPad points
unmatched_ipads <- tracking_data_all %>%
  filter(source == "iPad", date >= start_date) %>% # Only keep points on or after the start date
  anti_join(tracking_data_all %>% 
              filter(source == "receiver"), 
            by = c("radioID", "date", "shift"))  # Ensure date and shift are also used for matching

# Step 3: Combine the unmatched datasets
unmatched_receiver_iPad <- bind_rows(
  unmatched_receivers %>% mutate(source = "receiver"),
  unmatched_ipads %>% mutate(source = "iPad")
)

# View the combined unmatched dataset
print(unmatched_receiver_iPad)

# Write new csv
write.csv(unmatched_receiver_iPad, 
          file = "C:/Users/jpilchik/OneDrive - DOI/Documents/My study plan/Tagging/Tracking/radio_tracking_2024/data/QAQC/unmatched_receiver_iPad.csv", 
          row.names = FALSE)

```



